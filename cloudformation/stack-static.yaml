AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabaseMasterPassword:
    Type: String
    NoEcho: True
  DatabaseMasterUsername:
    Type: String
    NoEcho: True
  EnvironmentType:
    Description: The environment type (prod or dev)
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must be a prod or dev
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16
  VPCPublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  VPCPublicSubnet1AZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a
  VPCPublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  VPCPublicSubnet2AZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b
  DBSnapshotName: 
    Description: The name of a DB cluster snapshot (optional)
    Default: ""
    Type: String

Conditions:
  CreateProdResources: !Equals [!Ref EnvironmentType, prod]
  CreateDevResources: !Equals [!Ref EnvironmentType, dev]
  UseDBSnapshot: !Not [!Equals [!Ref DBSnapshotName, ""]]

Mappings:
  Environment:
    RDSDBInstanceClass:
      prod: db.r6g.large
      dev: db.t3.micro
    RDSAllocatedStorage:
      prod: 249 # GB
      dev: 20
    RDSMaxAllocatedStorage:
      prod: 300 # GB
      dev: 30
    RDSBackupRetentionPeriod:
      prod: 14 # days
      dev: 0
    BucketName:
      prod: mjcs-case-details
      dev: mjcs-case-details-dev

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: True
      EnableDnsHostnames: True

  VPCPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VPCPublicSubnet1AZ
      CidrBlock: !Ref VPCPublicSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: subnet_type
          Value: public

  VPCPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VPCPublicSubnet2AZ
      CidrBlock: !Ref VPCPublicSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: subnet_type
          Value: public

  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCInternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPCInternetGateway
      VpcId: !Ref VPC

  VPCIGRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  VPCIGRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
      RouteTableId: !Ref VPCIGRouteTable
    DependsOn: VPCInternetGatewayAttach

  VPCIGRouteTablePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCIGRouteTable
      SubnetId: !Ref VPCPublicSubnet1

  VPCIGRouteTablePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCIGRouteTable
      SubnetId: !Ref VPCPublicSubnet2

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:
        - !Ref VPCPublicSubnet1
        - !Ref VPCPublicSubnet2

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Controls access to Case Harvester database
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Anywhere
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Condition: CreateProdResources
    Properties:
      BackupRetentionPeriod: !If [UseDBSnapshot, !Ref "AWS::NoValue", !FindInMap [Environment, RDSBackupRetentionPeriod, prod]]
      DBClusterIdentifier: mjcs-prod
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DeletionProtection: True
      EnableCloudwatchLogsExports: 
        - postgresql
      Engine: aurora-postgresql
      EngineVersion: "12.6"
      MasterUsername: !If [UseDBSnapshot, !Ref "AWS::NoValue", !Ref DatabaseMasterUsername]
      MasterUserPassword: !If [UseDBSnapshot, !Ref "AWS::NoValue", !Ref DatabaseMasterPassword]
      PreferredBackupWindow: !If [UseDBSnapshot, !Ref "AWS::NoValue", 07:00-07:30]
      PreferredMaintenanceWindow: !If [UseDBSnapshot, !Ref "AWS::NoValue", sat:08:00-sat:08:30]
      VpcSecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
        - !GetAtt DatabaseSecurityGroup.GroupId
      Port: 5432
      SnapshotIdentifier: !If [UseDBSnapshot, !Ref DBSnapshotName, !Ref "AWS::NoValue"]
      AssociatedRoles:
        - FeatureName: s3Export
          RoleArn: !GetAtt ExportsRole.Arn

  ProdDatabase:
    Type: AWS::RDS::DBInstance
    Condition: CreateProdResources
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DBInstanceClass: !FindInMap [Environment, RDSDBInstanceClass, prod]
      DBInstanceIdentifier: !Sub mjcs-aurora
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-postgresql
      AllowMajorVersionUpgrade: True
      PubliclyAccessible: True
      PreferredMaintenanceWindow: sat:08:00-sat:08:30
      DBClusterIdentifier: !Ref DatabaseCluster

  Database:
    Type: AWS::RDS::DBInstance
    Condition: CreateDevResources
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      MaxAllocatedStorage: !FindInMap [Environment, RDSMaxAllocatedStorage, !Ref EnvironmentType]
      AllocatedStorage: !FindInMap [Environment, RDSAllocatedStorage, !Ref EnvironmentType]
      BackupRetentionPeriod: !FindInMap [Environment, RDSBackupRetentionPeriod, !Ref EnvironmentType]
      DBInstanceClass: !FindInMap [Environment, RDSDBInstanceClass, !Ref EnvironmentType]
      DBInstanceIdentifier: !Sub mjcs-${EnvironmentType}
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: postgres
      EngineVersion: "12.6"
      AllowMajorVersionUpgrade: True
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      Port: "5432"
      PubliclyAccessible: True
      StorageType: gp2
      PreferredBackupWindow: 07:00-07:30
      PreferredMaintenanceWindow: sat:08:00-sat:08:30
      VPCSecurityGroups:
        - !GetAtt VPC.DefaultSecurityGroup
        - !Ref DatabaseSecurityGroup

  CaseDetailsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !FindInMap [Environment, BucketName, !Ref EnvironmentType]
      VersioningConfiguration:
        Status: Enabled
  
  ExportsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateProdResources
    Properties:
      AccessControl: PublicRead
      BucketName: caseharvester-exports
  
  ExportsRole:
    Type: AWS::IAM::Role
    Condition: CreateProdResources
    Properties:
      RoleName: !Sub caseharvester_exports_role
      Description: IAM role used for exporting to S3 from RDS
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: exports_role_policies
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - "arn:aws:s3:::caseharvester-exports/*"
                  - "arn:aws:s3:::caseharvester-exports"

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub caseharvester_cluster_${EnvironmentType}
  
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub caseharvester_ecs_execution_role_${EnvironmentType}
      Description: IAM role used for executing ECS tasks and Cloudwatch rules
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      Policies:
        - PolicyName: execution_role_policies
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

Outputs:
  ProdDatabaseHostname:
    Description: Endpoint hostname for the database
    Condition: CreateProdResources
    Value: !GetAtt ProdDatabase.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseHostname
  DatabaseHostname:
    Description: Endpoint hostname for the database
    Condition: CreateDevResources
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseHostname
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCId
  VPCCidr:
    Description: VPC IP range
    Value: !Ref VPCCidr
    Export:
      Name: !Sub ${AWS::StackName}-VPCCidr
  VPCDefaultSecurityGroupId:
    Description: VPC default security group ID
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-VPCDefaultSecurityGroupId
  VPCPublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref VPCPublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-VPCPublicSubnet1Id
  VPCPublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref VPCPublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-VPCPublicSubnet2Id
  CaseDetailsBucketName:
    Description: Case details S3 bucket name
    Value: !Ref CaseDetailsBucket
    Export:
      Name: !Sub ${AWS::StackName}-CaseDetailsBucketName
  CaseDetailsBucketArn:
    Description: Case details S3 bucket ARN
    Value: !GetAtt CaseDetailsBucket.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CaseDetailsBucketArn
  ECSClusterArn:
    Description: ECS Cluster used for running spider and scraper
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSClusterArn
  ExecutionTaskArn:
    Description: Execution role ARN
    Value: !GetAtt ExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ExecutionRoleArn

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabasePassword:
    Type: String
    NoEcho: True
  DatabaseUsername:
    Type: String
    NoEcho: True
  DatabaseName:
    Type: String
    Default: mjcs
  StaticStackName:
    Description: Name of the static stack, for getting database and S3 bucket details
    Type: String
  DockerRepoStackName:
    Description: Name of the docker repo stack, for getting repository name
    Type: String
  EnvironmentType:
    Description: The environment type (prod or dev)
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must be a prod or dev
  AWSRegion:
    Description: AWS Region
    Type: String
    Default: us-east-1
  UserAgent:
    Description: User Agent to use for requests to MJCS
    Type: String

Resources:
  ScraperQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 300
      QueueName: !Sub mjcs_scraper_queue_${EnvironmentType}

  ScaperQueueNotEmptyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: scraper_queue_not_empty_alarm
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 1
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ScraperQueue.QueueName
      AlarmActions:
        - !Ref ScraperServiceScaleOutPolicy

  ScaperQueueEmptyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: scraper_queue_empty_alarm
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 60
      Statistic: Average
      Threshold: 1
      Dimensions:
        - Name: QueueName
          Value: !GetAtt ScraperQueue.QueueName
      AlarmActions:
        - !Ref ScraperServiceScaleInPolicy

  ScraperTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub mjcs_ecs_scraper_task_role_${EnvironmentType}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  ScraperService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub mjcs_scraper_service_${EnvironmentType}
      Cluster:
        Fn::ImportValue: !Sub ${StaticStackName}-ECSClusterArn
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${StaticStackName}-VPCDefaultSecurityGroupId
          Subnets:
            - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet1Id
            - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet2Id
      TaskDefinition: !Ref ScraperServiceTask
  
  ScraperServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 0
      RoleARN: 
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Sub service/caseharvester_cluster_${EnvironmentType}/mjcs_scraper_service_${EnvironmentType}

  ScraperServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: caseharvester-scraper-service-scale-out-policy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScraperServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ExactCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 500000
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 500000
            ScalingAdjustment: 2
  
  ScraperServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: caseharvester-scraper-service-scale-in-policy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScraperServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ExactCapacity
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: 0

  ScraperServiceTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub mjcs_scraper_container_${EnvironmentType}
          Command:
            - python
            - -u
            - case_harvester.py
            - --environment
            - !Sub ${EnvironmentType}
            - scraper
            - --service
          Environment:
            - Name: MJCS_DATABASE_URL
              Value: !Sub
                - postgresql://${db_user}:${db_pw}@${db_addr}/${db_name}
                - db_user: !Ref DatabaseUsername
                  db_pw: !Ref DatabasePassword
                  db_addr:
                    Fn::ImportValue: !Sub ${StaticStackName}-DatabaseHostname
                  db_name: !Ref DatabaseName
            - Name: SCRAPER_QUEUE_NAME
              Value: !GetAtt ScraperQueue.QueueName
            - Name: CASE_DETAILS_BUCKET
              Value:
                Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketName
            - Name: USER_AGENT
              Value: !Ref UserAgent
          Image: !Sub
            - ${AWS::AccountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${repo_name}
            - repo_name:
                Fn::ImportValue: !Sub ${DockerRepoStackName}-DockerRepoName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-region: !Ref AWSRegion
              awslogs-group: !Sub caseharvester-scraper-service-${EnvironmentType}
              awslogs-stream-prefix: caseharvester-scraper-service-logs
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${StaticStackName}-ExecutionRoleArn
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt ScraperTaskRole.Arn

  DailyScraperTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub mjcs_scraper_container_${EnvironmentType}
          Command:
            - python
            - -u
            - case_harvester.py
            - --environment
            - !Sub ${EnvironmentType}
            - scraper
            - --stale
          Environment:
            - Name: MJCS_DATABASE_URL
              Value: !Sub
                - postgresql://${db_user}:${db_pw}@${db_addr}/${db_name}
                - db_user: !Ref DatabaseUsername
                  db_pw: !Ref DatabasePassword
                  db_addr:
                    Fn::ImportValue: !Sub ${StaticStackName}-DatabaseHostname
                  db_name: !Ref DatabaseName
            - Name: SCRAPER_QUEUE_NAME
              Value: !GetAtt ScraperQueue.QueueName
            - Name: CASE_DETAILS_BUCKET
              Value:
                Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketName
            - Name: USER_AGENT
              Value: !Ref UserAgent
          Image: !Sub
            - ${AWS::AccountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${repo_name}
            - repo_name:
                Fn::ImportValue: !Sub ${DockerRepoStackName}-DockerRepoName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-region: !Ref AWSRegion
              awslogs-group: !Sub caseharvester-scraper-daily-${EnvironmentType}
              awslogs-stream-prefix: caseharvester-scraper-daily-logs
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 4096
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${StaticStackName}-ExecutionRoleArn
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt ScraperTaskRole.Arn

  DailyScraperRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub daily_scraper_${EnvironmentType}
      Description: Daily rescrape cases based on case age
      ScheduleExpression: cron(0 22 * * ? *)  # 6pm ET
      Targets:
        - Id: scraper_ecs_task_target
          Arn:
            Fn::ImportValue: !Sub ${StaticStackName}-ECSClusterArn
          RoleArn:
            Fn::ImportValue: !Sub ${StaticStackName}-ExecutionRoleArn
          EcsParameters:
            LaunchType: FARGATE
            TaskDefinitionArn: !Ref DailyScraperTask
            TaskCount: 1
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCDefaultSecurityGroupId
                Subnets:
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet1Id
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet2Id

Outputs:
  ScraperQueueName:
    Description: Scraper queue name
    Value: !GetAtt ScraperQueue.QueueName
    Export:
      Name: !Sub ${AWS::StackName}-ScraperQueueName
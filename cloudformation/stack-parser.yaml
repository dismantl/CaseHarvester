AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabasePassword:
    Type: String
    NoEcho: True
  DatabaseUsername:
    Type: String
    NoEcho: True
  DatabaseName:
    Type: String
    Default: mjcs
  StaticStackName:
    Description: Name of the static stack, for getting database and S3 bucket details
    Type: String
  DockerRepoStackName:
    Description: Name of the docker repo stack, for getting repository name
    Type: String
  EnvironmentType:
    Description: The environment type (prod or dev)
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must be a prod or dev
  AWSRegion:
    Description: AWS Region
    Type: String
    Default: us-east-1

Conditions:
  CreateProdResources: !Equals [!Ref EnvironmentType, prod]

Resources:
  Parser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: parser_lambda.lambda_handler
      Runtime: python3.8
      Policies:
        - AWSLambda_FullAccess
        - S3ReadPolicy:
            BucketName:
              Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketName
        - AmazonSQSFullAccess
        - VPCAccessPolicy: {}
      CodeUri: ../pkg/parser
      MemorySize: 300
      Timeout: 900
      ReservedConcurrentExecutions: !If [CreateProdResources, 900, !Ref "AWS::NoValue"]
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ParserFailedQueue.Arn
      Environment:
        Variables:
          MJCS_DATABASE_URL: !Sub
            - postgresql://${db_user}:${db_pw}@${db_addr}/${db_name}
            - db_user: !Ref DatabaseUsername
              db_pw: !Ref DatabasePassword
              db_addr:
                Fn::ImportValue: !Sub ${StaticStackName}-DatabaseHostname
              db_name: !Ref DatabaseName
          CASE_DETAILS_BUCKET:
            Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketName
          PARSER_FAILED_QUEUE_NAME: !GetAtt ParserFailedQueue.QueueName
          PARSER_TRIGGER_ARN: !Ref ParserTrigger
      Events:
        SNSTrigger:
          Type: SNS
          Properties:
            Topic: !Ref ParserTrigger
        SQSTrigger:
          Type: SQS
          Properties:
            BatchSize: !If [CreateProdResources, 500, 200]
            MaximumBatchingWindowInSeconds: 300
            Queue: !GetAtt ParserQueue.Arn

  ParserTrigger:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub mjcs_parser_trigger_${EnvironmentType}

  ParserS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:*
      FunctionName: !Ref Parser
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketArn

  ParserFailedQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 30
      QueueName: !Sub mjcs_parser_failed_queue_${EnvironmentType}

  ParserQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 5400  # 6x lambda timeout (1.5 hr)
      QueueName: !Sub mjcs_parser_queue_${EnvironmentType}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ParserFailedQueue.Arn
        maxReceiveCount: 5

Outputs:
  ParserArn:
    Description: ARN of Parser lambda function
    Value: !GetAtt Parser.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ParserArn
  ParserTriggerArn:
    Description: ARN of the SNS topic to trigger Parser lambda
    Value: !Ref ParserTrigger
    Export:
      Name: !Sub ${AWS::StackName}-ParserTriggerArn
  ParserFailedQueueName:
    Description: Name of the Parser lambda DLQ
    Value: !GetAtt ParserFailedQueue.QueueName
    Export:
      Name: !Sub ${AWS::StackName}-ParserFailedQueueName
  ParserQueueName:
    Description: General purpose queue for parsing programs
    Value: !GetAtt ParserQueue.QueueName
    Export:
      Name: !Sub ${AWS::StackName}-ParserQueueName

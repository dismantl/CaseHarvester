AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DatabasePassword:
    Type: String
    NoEcho: True
  DatabaseUsername:
    Type: String
    NoEcho: True
  DatabaseName:
    Type: String
    Default: mjcs
  StaticStackName:
    Description: Name of the static stack, for getting database and S3 bucket details
    Type: String
  DockerRepoStackName:
    Description: Name of the docker repo stack, for getting repository name
    Type: String
  EnvironmentType:
    Description: The environment type (prod or dev)
    Type: String
    Default: dev
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must be a prod or dev

Conditions:
  CreateProdResources: !Equals [!Ref EnvironmentType, prod]

Resources:
  Parser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: parser_lambda.lambda_handler
      Runtime: python3.8
      FunctionName: !Sub caseharvester_parser_${EnvironmentType}
      Policies: # TODO slim this down
        - AWSLambda_FullAccess
        - S3ReadPolicy:
            BucketName:
              Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketName
        - AmazonSQSFullAccess
        - VPCAccessPolicy: {}
      CodeUri: ../pkg/parser
      MemorySize: 300
      Timeout: 900
      ReservedConcurrentExecutions: !If [CreateProdResources, 250, !Ref "AWS::NoValue"]
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ParserFailedQueue.Arn
      Environment:
        Variables:
          MJCS_DATABASE_URL: !Sub
            - postgresql://${db_user}:${db_pw}@${db_addr}/${db_name}
            - db_user: !Ref DatabaseUsername
              db_pw: !Ref DatabasePassword
              db_addr:
                Fn::ImportValue: !Sub ${StaticStackName}-DatabaseHostname
              db_name: !Ref DatabaseName
          CASE_DETAILS_BUCKET:
            Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketName
          PARSER_FAILED_QUEUE_NAME: !GetAtt ParserFailedQueue.QueueName
          PARSER_TRIGGER_ARN: !Ref ParserTrigger
      Events:
        SNSTrigger:
          Type: SNS
          Properties:
            Topic: !Ref ParserTrigger
        SQSTrigger:
          Type: SQS
          Properties:
            BatchSize: 200
            MaximumBatchingWindowInSeconds: 300
            Queue: !GetAtt ParserQueue.Arn

  ParserTrigger:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub caseharvester_parser_trigger_${EnvironmentType}

  ParserS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:*
      FunctionName: !Ref Parser
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::ImportValue: !Sub ${StaticStackName}-CaseDetailsBucketArn

  ParserFailedQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 30
      QueueName: !Sub caseharvester_parser_failed_queue_${EnvironmentType}

  ParserQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 5400  # 6x lambda timeout (1.5 hr)
      QueueName: !Sub caseharvester_parser_queue_${EnvironmentType}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ParserFailedQueue.Arn
        maxReceiveCount: 5

  MonthlyExportTaskRole:
    Type: AWS::IAM::Role
    Condition: CreateProdResources
    Properties:
      RoleName: caseharvester_ecs_export_task_role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  MonthlyExportTask:
    Type: AWS::ECS::TaskDefinition
    Condition: CreateProdResources
    Properties:
      ContainerDefinitions:
        - Name: caseharvester_export_container
          Command:
            - python
            - -u
            - harvester.py
            - --environment
            - production
            - export-tables
            - --redacted
          Environment:
            - Name: MJCS_DATABASE_URL
              Value: !Sub
                - postgresql://${db_user}:${db_pw}@${db_addr}/${db_name}
                - db_user: !Ref DatabaseUsername
                  db_pw: !Ref DatabasePassword
                  db_addr:
                    Fn::ImportValue: !Sub ${StaticStackName}-DatabaseHostname
                  db_name: !Ref DatabaseName
          Image: !Sub
            - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${repo_name}
            - repo_name:
                Fn::ImportValue: !Sub ${DockerRepoStackName}-DockerRepoName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-group: caseharvester-export-monthly
              awslogs-stream-prefix: caseharvester-export-monthly-logs
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${StaticStackName}-ExecutionRoleArn
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt MonthlyExportTaskRole.Arn

  MonthlyExport:
    Type: AWS::Events::Rule
    Condition: CreateProdResources
    Properties:
      Name: !Sub monthly_export_${EnvironmentType}
      Description: Export tables to S3
      ScheduleExpression: cron(0 0 1 * ? *)
      Targets:
        - Id: export_ecs_task_target
          Arn:
            Fn::ImportValue: !Sub ${StaticStackName}-ECSClusterArn
          RoleArn:
            Fn::ImportValue: !Sub ${StaticStackName}-ExecutionRoleArn
          EcsParameters:
            LaunchType: FARGATE
            TaskDefinitionArn: !Ref MonthlyExportTask
            TaskCount: 1
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCDefaultSecurityGroupId
                Subnets:
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet1Id
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet2Id

  QuarterlyReparseTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub caseharvester_ecs_reparse_task_role_${EnvironmentType}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  QuarterlyReparseTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: caseharvester_reparse_container
          Command:
            - python
            - -u
            - harvester.py
            - --environment
            - production
            - parser
            - --reparse
          Environment:
            - Name: MJCS_DATABASE_URL
              Value: !Sub
                - postgresql://${db_user}:${db_pw}@${db_addr}/${db_name}
                - db_user: !Ref DatabaseUsername
                  db_pw: !Ref DatabasePassword
                  db_addr:
                    Fn::ImportValue: !Sub ${StaticStackName}-DatabaseHostname
                  db_name: !Ref DatabaseName
            - Name: PARSER_QUEUE_NAME
              Value: !GetAtt ParserQueue.QueueName
          Image: !Sub
            - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${repo_name}
            - repo_name:
                Fn::ImportValue: !Sub ${DockerRepoStackName}-DockerRepoName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-region: !Sub ${AWS::Region}
              awslogs-group: caseharvester-reparse-quarterly
              awslogs-stream-prefix: caseharvester-reparse-quarterly-logs
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 12288
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${StaticStackName}-ExecutionRoleArn
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt QuarterlyReparseTaskRole.Arn

  QuarterlyReparse:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub quarterly_reparse_${EnvironmentType}
      Description: Reparse all cases
      ScheduleExpression: cron(0 12 16 FEB,MAY,AUG,NOV ? *)
      Targets:
        - Id: reparse_ecs_task_target
          Arn:
            Fn::ImportValue: !Sub ${StaticStackName}-ECSClusterArn
          RoleArn:
            Fn::ImportValue: !Sub ${StaticStackName}-ExecutionRoleArn
          EcsParameters:
            LaunchType: FARGATE
            TaskDefinitionArn: !Ref QuarterlyReparseTask
            TaskCount: 1
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCDefaultSecurityGroupId
                Subnets:
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet1Id
                  - Fn::ImportValue: !Sub ${StaticStackName}-VPCPublicSubnet2Id

Outputs:
  ParserArn:
    Description: ARN of Parser lambda function
    Value: !GetAtt Parser.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ParserArn
  ParserTriggerArn:
    Description: ARN of the SNS topic to trigger Parser lambda
    Value: !Ref ParserTrigger
    Export:
      Name: !Sub ${AWS::StackName}-ParserTriggerArn
  ParserFailedQueueName:
    Description: Name of the Parser lambda DLQ
    Value: !GetAtt ParserFailedQueue.QueueName
    Export:
      Name: !Sub ${AWS::StackName}-ParserFailedQueueName
  ParserQueueName:
    Description: General purpose queue for parsing programs
    Value: !GetAtt ParserQueue.QueueName
    Export:
      Name: !Sub ${AWS::StackName}-ParserQueueName
